.TH "md__home_runner_work__o_p_i_chat__o_p_i_chat__a_r_c_h" 3 "Wed Feb 9 2022" "OPIchat" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__home_runner_work__o_p_i_chat__o_p_i_chat__a_r_c_h \- OPIchat architecture bible 
The following project is organised in a certain way (and must stay like this!!) in order to keep it reliable, secure and maintainable\&.
.PP
Thus, there is a serie of non-exhaustive mandatory rules that must be followed in order to make the project work\&.
.SH "Coding style"
.PP
.IP "\(bu" 2
The project \fBmust follow the EPITA coding style\fP (obviously)\&.
.IP "\(bu" 2
Macro's must be \fIUPPERCASE\fP\&.
.IP "\(bu" 2
Functions, enumerations and variables must be \fIsnake_case\fP\&.
.PP
.SH "Architecture"
.PP
The project is divided in the following parts:
.PP
.IP "\(bu" 2
\fCsrc/\fP
.IP "  \(bu" 4
\fCclient/\fP: the client part\&.
.IP "  \(bu" 4
\fCserver/\fP: the server\&.
.IP "  \(bu" 4
\fCcommon/\fP: functions and procedures that are used by both the client and the server\&.
.IP "  \(bu" 4
\fC\fBclient_main\&.c\fP\fP: the main file of the client\&.
.IP "  \(bu" 4
\fC\fBserver_main\&.c\fP\fP: the main file of the server\&.
.PP

.IP "\(bu" 2
\fCinclude/\fP: the header files\&.
.IP "\(bu" 2
\fCtests/\fP
.IP "  \(bu" 4
\fC\fBtest_main\&.c\fP\fP : the manual main test file\&.
.IP "  \(bu" 4
\fCunit_testing/\fP : the unit testing folder\&.
.PP

.PP
.SH "Header files"
.PP
A header file must contains for each feature:
.PP
.IP "\(bu" 2
Their structures\&.
.IP "\(bu" 2
Their functions
.IP "\(bu" 2
Their macros\&.
.IP "\(bu" 2
Their global variables\&.
.IP "\(bu" 2
Their constants\&.
.IP "\(bu" 2
Their enumerations\&.
.PP
.PP
Concretely, all the informations that must be shared between project's folders must be put in the header files\&.
.PP
Also, each header \fBMUST\fP have a standard include guard :
.PP
.PP
.nf
#ifndef __MY_HEADER_FILE_H__
#define __MY_HEADER_FILE_H__
\&.\&.\&.
#endif
.fi
.PP
.PP
NB : \fC#pragma once\fP is not standard, then forbiden\&.
.PP
Also, if the name of the header file is \fCmy_header_file\&.h\fP, the corresponding include guard must be \fCMY_HEADER_FILE_H\fP\&.
.SH "Isolation and 'foldering'"
.PP
All functions must be isolated in their own logical files\&.
.PP
For example, \fCsrc/common/message_free\&.c\fP contains all the functions that are used to free a message\&.
.PP
Also, if you create a feature and you want to separate it in different files, you must create a folder for it\&. For example, if you create a \fCsrc/common/message_free\&.c\fP and \fCsrc/common/message_parser\&.c\fP files, you must create a \fCsrc/common/message/\fP folder and put the two files in it\&.
.SH "Documentation"
.PP
All functions, structures, structure field, macros, global variables\&. are documented in their corresponding header file\&.
.PP
The documentation must be written with the \fCDoxygen\fP syntax\&.
.SH "Unit testing"
.PP
All written functions \fBMUST HAVE a unit test\fP which use the \fICriterion\fP framework\&. The unit test must be in the \fCtests/unit_testing/\fP folder\&. The unit test file must be named like \fC<something>_test\&.c\fP\&.
.SH "Memory allocations"
.PP
All functions that allocate memory \fBMUST BE\fP freed (again this is obviously obvious)\&.
.PP
Also, heap memory allocation \fBMUST NOT\fP be done with malloc(), calloc() or realloc(), but with the functions defined in the \fC\fBsrc/common/utils/xalloc\&.c\fP\fP file\&.
.PP
We won't preload our \fBxmalloc()\fP dude thus there is a tollerance for functions under our control (like syscalls or other libc stuff)\&.
.SH "Recommended practices"
.PP
If you create a set of methods and structure you don't want another programmer (or hAcKeR user) to manipulate data as their wish, you can use the following practices:
.PP
.IP "\(bu" 2
All \fIINTERNAL\fP the methods of a structure \fBMUST\fP be static\&.
.IP "\(bu" 2
All hidden structures \fBMUST NOT\fP be in the header file\&. Instead, they must be in the \&.c source file\&.
.IP "\(bu" 2
You can create a mempool for your structures and just allow external users to communicate with it through the functions defined in the same file\&. 
.PP

