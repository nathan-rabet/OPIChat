.TH "md__home_runner_work__o_p_i_chat__o_p_i_chat__p_r_o_t_o_c_o_l" 3 "Wed Feb 9 2022" "OPIchat" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__home_runner_work__o_p_i_chat__o_p_i_chat__p_r_o_t_o_c_o_l \- Protocol 

.SH "Introduction"
.PP
In OPIChat, clients can send messages to the server\&. We will call such messages \fCrequests\fP\&.
.PP
These requests contain a command, indicating the action that needs to be performed by the server\&.
.PP
The server will reply with another message called either \fCresponse\fP or \fCerror\fP depending on the completion of the request\&. It provides information about the status of the performed action\&.
.PP
A server might also send unsolicited responses to connected clients to inform them of an event (for example, notify that a client just received a message from another client)\&. Such messages will be called \fCnotifications\fP\&.
.PP
The OPIChat protocol is inspired by HTTP and IRC\&. We introduce you to a simplified version of these protocols so you do not lose time reading complex specifications\&.
.SH "Syntax"
.PP
Requests, responses, notifications and errors in \fIOPIChat\fP all follow the same syntax\&.
.PP
They are composed of five main components: payload size, status code, command, command parameters and payload:
.PP
.IP "\(bu" 2
The payload size is the number of bytes of the payload\&.
.IP "\(bu" 2
The status code is an integer indicating the type of the message or the possible errors\&. Every integer has its own meaning:
.IP "  \(bu" 4
A status code of 0 indicates that the message is a \fCrequest\fP\&.
.IP "  \(bu" 4
A status code of 1 indicates that it is a successful \fCresponse\fP\&.
.IP "  \(bu" 4
A status code of 2 indicates a notification from the server to a client (for example a message from a client to another)\&.
.IP "  \(bu" 4
A status code of 3 indicates that the message is a response to notify an error while processing a request, such message is called an \fCerror\fP\&.
.PP

.IP "\(bu" 2
The command is a string identifying the action performed by the server\&.
.IP "\(bu" 2
The command parameters specify special requirements for a command (for example the username of a client you might want to send a message to)\&. There can be any number of parameters in a message, each command as its own required parameters documented in the appropriate sections\&. Each parameter consists of a key/value pair with the following syntax: \fCkey=value\fP\&. Parameters can be in any order in the message\&.
.PP
.PP
Each of theses elements are separated by a newline and there can be any number of parameters\&. The end of command parameters is marked by an empty line, which therefore represents the start of the payload\&.
.PP
For example the following is a request sent by a user named \fCING1\fP asking the server to send the message \fC2022\fP to the user \fCacu\fP:
.PP
.RS 4
4$\\ 0$\\ SEND-DM$\\ User=acu$\\ $\\ 2022 
.RE
.PP
.PP
In this example and all the others in this document, the \fC$\fP character corresponds to a newline\&.
.PP
Such request will cause the server to send a response to the original client indicating the status of the operation\&. Upon successful completion, the response will look like this:
.PP
.RS 4
0$\\ 1$\\ SEND-DM$\\ User=acu$\\ $ 
.RE
.PP
.PP
While processing the request, the server will also generate a notification for user acu to notify them of a message:
.PP
.RS 4
4$\\ 2$\\ SEND-DM$\\ User=acu$\\ From=ING1$\\ $\\ 2022 
.RE
.PP
.SH "Core features"
.PP
This section defines the implemented commands\&.
.PP
.RS 4
Unless stated otherwise and if not specified, payloads and parameters can be ignored\&. 
.RE
.PP
.SS "PING"
The PING command does not require any payload in the request\&. The server must simply respond with \fCPONG$\fP in the payload\&.
.SS "Parameters"
The \fCPING\fP command does not require any parameter\&.
.SS "Error codes"
No specific error codes are defined for the \fCPING\fP command\&.
.SS "Examples"
Request
.PP
.RS 4
0$\\ 0$\\ PING$\\ $ 
.RE
.PP
.PP
Response
.PP
.RS 4
5$\\ 1$\\ PING$\\ $\\ PONG$ 
.RE
.PP
.SS "LOGIN"
The \fCLOGIN\fP command is used by a client to assign itself a user name\&.
.PP
The user name is sent in the payload of the request and consists solely of alpha-numerical characters\&.
.PP
Upon succesfull completion, the server must sendLogged in$in the response\&.
.SS "Parameters"
The \fCLOGIN\fP command does not take any parameters\&.
.SS "Error codes"
Bad username
.PP
This error is sent when the provided user name is invalid (i\&.e\&. it contains non alpha-numerical characters or empty user name)\&.
.PP
.IP "\(bu" 2
Payload:\fCBad username$\fP
.PP
.PP
Duplicate username
.PP
This error is sent when the provided user name is already used by another client\&.
.PP
.IP "\(bu" 2
Payload:\fCDuplicate username$\fP
.PP
.SS "Examples"
Request
.PP
.RS 4
3$\\ 0$\\ LOGIN$\\ $\\ acu 
.RE
.PP
.PP
Response
.PP
.RS 4
10$\\ 1$\\ LOGIN$\\ $\\ Logged in$ 
.RE
.PP
.SS "LIST-USERS"
The \fCLIST-USERS\fP command lists all currently connected and logged in users\&.
.PP
Users are outputted in the payload of the response by outputting each user name followed by a newline\&. Client that are not logged in are not listed\&.
.PP
User names are ordered by connection date in ascending order\&.
.SS "Parameters"
The \fCLIST-USERS\fP command does not require any parameter\&.
.SS "Error codes"
No specific error codes are defined for the \fCLIST-USERS\fP command\&.
.SS "Examples"
Request
.PP
.RS 4
0$\\ 0$\\ LIST-USERS$\\ $ 
.RE
.PP
.PP
Response
.PP
.RS 4
15$\\ 1$\\ LIST-USERS$\\ $\\ acu$\\ Hoppy$\\ ING1$ 
.RE
.PP
.SS "SEND-DM\&."
The \fCSEND-DM\fP command asks the server to send a direct message to the user specified in parameter\&. Such direct message is represented by a notification containing the same payload as the request\&.
.PP
Upon completion, the server must send a response with an empty payload\&.
.SS "Parameters"
User
.PP
Represents the user name of the recipient of the message\&. Required in request, response and notification\&.
.PP
From
.PP
Represents the user name of the sender of the message\&. Required in notification\&.
.PP
If the sender is not logged in, the \fCFrom\fP parameter must take the value \fC<Anonymous>\fP\&.
.SS "Error codes"
User not found
.PP
This error is sent when the specified user could not be found\&.
.PP
.IP "\(bu" 2
Payload:\fCUser not found$\fP
.PP
.SS "Client side"
Upon receiving a \fCSEND-DM\fP notification from the server, a client must log the message on \fCstdout\fP with the following format:
.PP
\fCFrom <user>: <payload>$\fP
.PP
By replacing \fC<user>\fP by the user name of the sender and \fC<payload>\fP by the payload of the notification\&.
.SS "Examples"
\fCING1\fP sends the direct message \fC2022\fP to \fCacu\fP:
.PP
Request
.PP
From \fCING1\fP to the server
.PP
.RS 4
4$\\ 0$\\ SEND-DM$\\ User=acu$\\ $\\ 2022 
.RE
.PP
.PP
Response
.PP
From the server toING1
.PP
.RS 4
0$\\ 1$\\ SEND-DM$\\ User=acu$\\ $ 
.RE
.PP
.PP
Notification
.PP
From the server toacu
.PP
.RS 4
4$\\ 2$\\ SEND-DM$\\ User=acu$\\ From=ING1$\\ $\\ 2022 
.RE
.PP
.SS "BROADCAST"
The broadcast command is used to send a direct message to every user currently connected, logged in or not, excluding the original sender\&. As for theSEND-DM, the message is represented by a notification containing the same payload as the request\&.
.PP
Upon completion, the server must send a response with an empty payload\&.
.SS "Parameters"
From
.PP
Represents the user name of the sender of the message\&. Required in notification\&.
.PP
If the sender is not logged in, the \fCFrom\fP parameter must take the value \fC<Anonymous>\fP\&.
.SS "Error codes"
No specific error codes are defined for the \fCBROADCAST\fP command\&.
.SS "Client side"
Upon receiving a \fCBROADCAST\fP notification from the server, a client must log the message on \fCstdout\fP with the following format:
.PP
\fCFrom <user>: <payload>$\fP
.PP
By replacing \fC<user>\fP by the user name of the sender and \fC<payload>\fP by the payload of the notification\&.
.SS "Examples"
Request
.PP
.RS 4
4$\\ 0$\\ BROADCAST$\\ $\\ 2022 
.RE
.PP
.PP
Response
.PP
.RS 4
0$\\ 1$\\ BROADCAST$\\ $ 
.RE
.PP
.PP
Notification
.PP
.RS 4
4$\\ 2$\\ BROADCAST$\\ From=ING1$\\ $\\ 2022 
.RE
.PP
.SH "Additional features"
.PP
This section defines more advanced commands that will for example allow you to create chat rooms\&.
.SS "CREATE-ROOM\&."
The \fCCREATE-ROOM\fP command is used by a client to create a room\&.
.PP
The room name is sent in the payload of the request and consists solely of alpha-numericalcharacters\&.
.PP
The user making the request is marked as the owner of the room\&.
.PP
Upon completion, the server must send a response with \fCRoom created$\fP in the payload\&.
.SS "Parameters"
The \fCCREATE-ROOM\fP command does not take any parameters\&.
.SS "Error codes"
Bad name
.PP
This error is sent when the provided room name is invalid (i\&.e\&. it contains non alpha-numerical characters or empty room name)\&.
.PP
.IP "\(bu" 2
Payload:\fCBad room name$\fP
.PP
.PP
Duplicate name
.PP
This error is sent when trying to create a room when another room already owns the same name\&.
.PP
.IP "\(bu" 2
Payload:\fCDuplicate room name$\fP
.PP
.SS "Examples"
Request
.PP
.RS 4
8$\\ 0$\\ CREATE-ROOM$\\ $\\ FlagRoom 
.RE
.PP
.PP
Response
.PP
.RS 4
13$\\ 1$\\ CREATE-ROOM$\\ $\\ Room created$ 
.RE
.PP
.SS "LIST-ROOMS"
The \fCLIST-ROOMS\fP command lists all active rooms\&.
.PP
Rooms are outputted in the payload of the response by outputting each room name suffixed by a newline\&.
.PP
Room names are ordered by creation date in ascending order\&.
.SS "Parameters"
The \fCLIST-ROOMS\fP command does not require any parameter\&.
.SS "Error codes"
No specific error codes are defined for the \fCLIST-ROOMS\fP command\&.
.SS "Examples"
Request
.PP
.RS 4
0$\\ 0$\\ LIST-ROOMS$\\ $ 
.RE
.PP
.PP
Response
.PP
.RS 4
24$\\ 1$\\ LIST-ROOMS$\\ $\\ CISCO$\\ LABSR$\\ MIDLAB$\\ SM14$ 
.RE
.PP
.SS "JOIN-ROOM"
The \fCJOIN-ROOM\fP command is used by a client to subscribe to a room\&.
.PP
A user subscribed to a room will receive all messages sent to this room\&.
.PP
The room to join is indicated in the payload of the request\&.
.PP
Upon completion, the server must send \fCRoom joined$\fP in the payload\&.
.SS "Parameters"
The \fCJOIN-ROOM\fP command does not require any parameter\&.
.SS "Error codes"
Room not found
.PP
This error is sent when the specified room could not be found on the server\&.
.PP
.IP "\(bu" 2
Payload:\fCRoom not found$\fP
.PP
.SS "Examples"
Request
.PP
.RS 4
8$\\ 0$\\ JOIN-ROOM$\\ $\\ FlagRoom 
.RE
.PP
.PP
Response
.PP
.RS 4
12$\\ 1$\\ JOIN-ROOM$\\ $\\ Room joined$ 
.RE
.PP
.SS "LEAVE-ROOM"
The \fCLEAVE-ROOM\fP command is used by a client to unsubscribe from a room\&.
.PP
The room to leave is indicated in the payload of the request\&.
.PP
Upon completion, the server must sendRoom left$in the payload\&.
.SS "Parameters"
The \fCLEAVE-ROOM\fP command does not require any parameter\&.
.SS "Error codes"
Room not found
.PP
This error is sent when the specified room could not be found on the server\&.
.PP
.IP "\(bu" 2
Payload:\fCRoom not found$\fP
.PP
.SS "Examples"
Request
.PP
.RS 4
8$\\ 0$\\ LEAVE-ROOM$\\ $\\ FlagRoom 
.RE
.PP
.PP
Response
.PP
.RS 4
10$\\ 1$\\ LEAVE-ROOM$\\ $\\ Room left$ 
.RE
.PP
.SS "SEND-ROOM"
The \fCSEND-ROOM\fP command asks the server to send a message to a room and therefore, all users who joined it except the original sender\&.
.PP
Upon completion, the server must send a response with an empty payload\&.
.SS "Parameters"
Room
.PP
Represents the destination room name\&. Required in request, response and notification\&.
.PP
From
.PP
Represents the user name of the sender of the message\&. Required in notification\&.
.PP
If the sender is not logged in, the \fCFrom\fP parameter must take the value \fC<Anonymous>\fP\&.
.SS "Error codes"
Room not found
.PP
This error is sent when the specified room could not be found on the server\&.
.PP
.IP "\(bu" 2
Payload:\fCRoom not found$\fP
.PP
.SS "Client side"
Upon receiving a SEND-ROOM notification from the server, a client must log the message on \fCstdout\fP with the following format:
.PP
From \fC<user>@<room>: <payload>$\fP
.PP
By replacing\fC<user>\fPby the user name of the sender, \fC<room>\fP by the name of the room and \fC<payload>\fP by the payload of the notification\&.
.SS "Examples"
\fCING1\fP sends the message \fC2022\fP to the \fCFlagRoom\fP:
.PP
Request
.PP
From \fCING1\fP to the server
.PP
.RS 4
4$\\ 0$\\ SEND-ROOM$\\ Room=FlagRoom$\\ $\\ 2022 
.RE
.PP
.PP
Response
.PP
From the server to \fCING1\fP
.PP
.RS 4
0$\\ 1$\\ SEND-ROM$\\ Room=FlagRoom$\\ $ 
.RE
.PP
.PP
Notification
.PP
From the server to every user who joined \fCFlagRoom\fP
.PP
.RS 4
4$\\ 2$\\ SEND-ROOM$\\ Room=FlagRoom$\\ From=ING1$\\ $\\ 2022 
.RE
.PP
.SS "DELETE-ROOM"
The \fCDELETE-ROOM\fP Deletes the room specified in the payload\&.
.PP
The deletion is possible only if the user making the request is the owner of the room\&.
.PP
Upon completion, the server must sendRoom deletedin the payload\&.
.SS "Parameters"
The \fCDELETE-ROOM\fP command does not require any parameter\&.
.SS "Error codes"
Room not found
.PP
This error is sent when the specified room could not be found on the server\&.
.PP
.IP "\(bu" 2
Payload:\fCRoom not found$\fP
.PP
.PP
Unauthorized
.PP
This error is sent if the user is not the owner of the specified room
.PP
.IP "\(bu" 2
Payload:\fCUnauthorized$\fP
.PP
.SS "Examples"
Request
.PP
.RS 4
8$\\ 0$\\ DELETE-ROOM$\\ $\\ FlagRoom 
.RE
.PP
.PP
Response
.PP
.RS 4
13$\\ 1$\\ DELETE-ROOM$\\ $\\ Room deleted$ 
.RE
.PP
.SS "PROFILE"
The \fCPROFILE\fP command lists different information about the user making the request\&.
.PP
The payload of the response follows the following syntax:
.PP
.RS 4
Username: <name>$\\ IP: <ip>$\\ Rooms:$\\ <room>$* 
.RE
.PP
.PP
\fC<name>\fP corresponds to the user name of the client making the request\&.
.PP
\fC<ip>\fP is the IP address of the client making the request\&.
.PP
\fC<room>\fP is the name of a room joined by the client making the request\&. Every room joined by the user must be listed by room creation date in ascending order and suffixed by a newline\&.
.SS "Parameters"
The \fCPROFILE\fP command does not require any parameter\&.
.SS "Error codes"
No specific error codes are defined for the \fCPROFILE\fP command\&.
.SS "Examples"
Request
.PP
.RS 4
0$\\ 0$\\ PROFILE$\\ $ 
.RE
.PP
.PP
Response
.PP
.RS 4
50$\\ 1$\\ PROFILE$\\ $\\ Username: acu$\\ IP: 127\&.0\&.0\&.1$\\ Rooms:$\\ CISCO$\\ FlagRoom$ 
.RE
.PP

